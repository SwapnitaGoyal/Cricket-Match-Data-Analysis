--Creating Database 
CREATE DATABASE Cricket;

--Creating schema for raw data
CREATE OR REPLACE SCHEMA Raw_Data;

--Creating stage for loading the data from local system
CREATE OR REPLACE STAGE CRICKET.RAW_DATA.internal_load_stage;

--Creating file format
CREATE OR REPLACE FILE FORMAT json_format
type = json,
strip_outer_array = TRUE --To avoid row size issue

--load data into stage

--create transient table for loading data from stage
CREATE OR REPLACE TRANSIENT TABLE cricket.raw_data.raw_json
(data variant);

--Loading data into raw_json table froms stage
COPY INTO cricket.raw_data.raw_json
FROM @internal_load_stage
file_format = json_format
files = ('data.json')
on_error = continue;

--Show data
SELECT * FROM raw_json;

--extracting data from raw_json
CREATE OR REPLACE TRANSIENT TABLE cricket.raw_data.in_data
(id INT AUTOINCREMENT,
last_changed timestamp,
meta variant,
info variant,
innings ARRAY);

INSERT INTO cricket.raw_data.in_data(last_changed, meta, info, innings)
SELECT Current_timestamp(2),rj.data:meta::variant, rj.data:info::variant, rj.data:innings::ARRAY FROM raw_json rj;

SELECT * FROM cricket.raw_data.in_data;

------Staging Data
--Creating schema
CREATE OR REPLACE SCHEMA Staging_Data;

--Extracting match details
CREATE OR REPLACE TRANSIENT TABLE cricket.staging_data.stg_match_details AS
SELECT info:match_type_number::int as match_type_number,info:match_type::text as match_type, info:event.name::text as event_name, info:event.match_number::int as match_number, info:dates[0]::date as event_date, info:city::text as city,info:venue::text as venue, info:season::text as season, info:gender::text as gender, info:overs::int as overs, info:team_type::text as team_type, info:teams[0]::text as team_A, info:teams[1]::text as team_B, info:outcome.winner::text as winner, --info:outcome.by::text as Win_By
info:toss.winner::text as toss_winner, info:toss.decision::text as toss_decision 
FROM cricket.raw_data.in_data

SELECT * FROM cricket.staging_data.stg_match_details;

--Extracting player details

--SELECT info:match_type_number::int as match_type_number, p.path::text, p.value
--FROM cricket.raw_data.in_data rd,
--lateral flatten (input=>rd.info:players) p,

CREATE OR REPLACE TRANSIENT TABLE cricket.staging_data.stg_player_details AS
SELECT info:match_type_number:: int as match_type_number, p.path::text as team, team.value::text as player_name
FROM cricket.raw_data.in_data rd,
lateral flatten (input=>rd.info:players) p,
lateral flatten (input=>p.value) team

SELECT * FROM cricket.staging_data.stg_player_details

--Extracting innings details

CREATE OR REPLACE TRANSIENT TABLE cricket.staging_data.stg_innings AS
SELECT info:match_type_number::int as match_type_number, inn.value:team::text as team, ov.value:over::int as over,
del.value:batter::text as batter, del.value:bowler::text as bowler, del.value:non_striker::text as non_striker, del.value:runs.batter::int as runs, del.value:runs.extras::int as extras, del.value:runs.total::int as total_runs, wic.value:player_out::text as player_out, wic.value:kind::text as kind, wic.value:fielders::variant as fielders
FROM cricket.raw_data.in_data rd,
lateral flatten (input=>rd.innings) inn,
lateral flatten (input=>inn.value:overs) ov,
lateral flatten (input=>ov.value:deliveries) del,
lateral flatten (input=>del.value:wickets, outer=>True) wic;

--Cleaning Data
SELECT * FROM Cricket.STAGING_DATA.STG_MATCH_DETAILS;

UPDATE STG_MATCH_DETAILS
SET MATCH_NUMBER = 'NA'
WHERE MATCH_NUMBER IS NULL;

UPDATE STG_MATCH_DETAILS
SET WINNER = 'NA'
WHERE WINNER IS NULL;

ALTER TABLE STG_MATCH_DETAILS
ADD CONSTRAINT pk_match_type_number PRIMARY KEY (match_type_number);

SELECT * FROM Cricket.STAGING_DATA.STG_INNINGS;

UPDATE STG_INNINGS
SET PLAYER_OUT = '-'
WHERE PLAYER_OUT IS NULL;

UPDATE STG_INNINGS
SET KIND = '-'
WHERE KIND IS NULL;

ALTER TABLE STG_INNINGS
ADD CONSTRAINT STG_MATCH_DETAILS
FOREIGN KEY (MATCH_TYPE_NUMBER)
REFERENCES STG_MATCH_DETAILS(MATCH_TYPE_NUMBER);

SELECT * FROM STG_PLAYER_DETAILS;

ALTER TABLE STG_PLAYER_DETAILS
ADD CONSTRAINT STG_MATCH_DETAILS
FOREIGN KEY (MATCH_TYPE_NUMBER)
REFERENCES STG_MATCH_DETAILS(MATCH_TYPE_NUMBER);

---Final Output Data
--Creating Schema

CREATE OR REPLACE SCHEMA OUT_DATA;

--Dimension Team Data
CREATE OR REPLACE TABLE Out_DimTeam(
team_id int PRIMARY KEY autoincrement,
team_name text NOT NULL
);

--Dimension player data
CREATE OR REPLACE TABLE Out_DimPlayer(
player_id int PRIMARY KEY autoincrement,
team_id int NOT NULL,
player_name text NOT NULL,
CONSTRAINT Out_DimTeam FOREIGN KEY (team_id) REFERENCES Out_DimTeam(team_id)
);

--Dimension venue data
CREATE OR REPLACE TABLE Out_DimVenue(
venue_id int PRIMARY KEY autoincrement,
name text not null,
city text
);

--Time Dimension
CREATE OR REPLACE TABLE Out_DimTime(
time_key int PRIMARY KEY autoincrement,
Full_Date date,
Day int,
Month int,
year int,
quarter int,
dayofweek int,
dayofmonth int,
dayofyear int,
dayofweekname varchar(7)
)

--Upserting dimension data
MERGE INTO CRICKET.OUT_DATA.OUT_DIMTEAM target
USING (SELECT DISTINCT team FROM CRICKET.STAGING_DATA.STG_PLAYER_DETAILS) source
ON target.team_name = source.team
WHEN NOT MATCHED THEN INSERT (team_name) VALUES (team); 

MERGE INTO CRICKET.OUT_DATA.OUT_DIMPLAYER target
USING 
(SELECT DISTINCT A.team as team, A.player_name as player_name, B.team_id as team_id FROM CRICKET.STAGING_DATA.STG_PLAYER_DETAILS A JOIN CRICKET.OUT_DATA.OUT_DIMTEAM B ON A.TEAM = B.TEAM_NAME) source
ON target.team_id = source.team_id AND target.player_name = source.player_name
WHEN NOT MATCHED THEN INSERT (team_id, player_name) VALUES (team_id, player_name);

MERGE INTO CRICKET.OUT_DATA.OUT_DIMVENUE target
USING CRICKET.STAGING_DATA.STG_MATCH_DETAILS source
ON target.name = source.venue AND target.city = target.city
WHEN NOT MATCHED THEN INSERT (name, city) VALUES (venue, city)

--Transactional Data
--Match Fact
CREATE OR REPLACE TABLE CRICKET.OUT_DATA.Out_Match_Details (
match_id INT PRIMARY KEY,
event_date date,
event_name text,
venue_id INT,
team_A_id INT,
team_B_id INT,
total_over_A INT,
total_balls_A INT,
total_runs_A INT,
total_extras_A INT,
total_wicket_A INT,
total_overs_B INT,
total_balls_B INT,
total_runs_B INT,
total_extras_B INT,
total_wicket_B INT,
match_type_id INT,
match_type text,
season text,
gender text,
team_type text,
winner_id INT,
toss_winner_id INT,
toss_decision text,

CONSTRAINT fk_venue FOREIGN KEY (venue_id) REFERENCES Out_DimVenue(venue_id),
CONSTRAINT fk_teamA FOREIGN KEY (team_A_id) REFERENCES Out_DimTeam(team_id),
CONSTRAINT fk_teamB FOREIGN KEY (team_B_id) REFERENCES Out_DimTeam(team_id),
CONSTRAINT fk_winner FOREIGN KEY (winner_id) REFERENCES Out_DimTeam(team_id),
CONSTRAINT fk_toss_winner FOREIGN KEY (toss_winner_id) REFERENCES Out_DimTeam(team_id)

);


INSERT INTO CRICKET.OUT_DATA.OUT_MATCH_DETAILS
SELECT stg.match_number, stg.event_date, stg.event_name, ven.venue_id, teamA.team_id, teamB.TEAM_ID, 
MAX(CASE WHEN inn.team = teamA.TEAM_NAME THEN inn.over ELSE 0 END) AS total_over_A,
SUM(CASE WHEN inn.team = teamA.TEAM_NAME THEN 1 ELSE 0 END) AS total_balls_A,
SUM(CASE WHEN inn.team = teamA.TEAM_NAME THEN inn.total_runs ELSE 0 END) AS total_runs_A,
SUM(CASE WHEN inn.team = teamA.TEAM_NAME THEN inn.extras ELSE 0 END) AS total_extras_A,
SUM(CASE WHEN inn.team = teamA.TEAM_NAME AND inn.player_out != '-' THEN 1 ELSE 0 END) AS total_wicket_A,

MAX(CASE WHEN inn.team = teamB.TEAM_NAME THEN inn.over ELSE 0 END) AS total_over_B,
SUM(CASE WHEN inn.team = teamB.TEAM_NAME THEN 1 ELSE 0 END) AS total_balls_B,
SUM(CASE WHEN inn.team = teamB.TEAM_NAME THEN inn.total_runs ELSE 0 END) AS total_runs_B,
SUM(CASE WHEN inn.team = teamB.TEAM_NAME THEN inn.extras ELSE 0 END) AS total_extras_B,
SUM(CASE WHEN inn.team = teamB.TEAM_NAME AND inn.player_out != '-' THEN 1 ELSE 0 END) AS total_wicket_B,

stg.match_type_number, stg.match_type, stg.season, stg.gender, stg.team_type, win.team_id, toss.team_id, stg.toss_decision

FROM CRICKET.STAGING_DATA.STG_MATCH_DETAILS stg
JOIN CRICKET.OUT_DATA.OUT_DIMVENUE ven ON stg.city = ven.city AND stg.venue = ven.name
JOIN CRICKET.OUT_DATA.OUT_DIMTEAM teamA ON stg.team_a = teamA.TEAM_NAME
JOIN CRICKET.OUT_DATA.OUT_DIMTEAM teamB ON stg.team_b = teamB.team_name
JOIN CRICKET.STAGING_DATA.STG_INNINGS inn ON stg.match_type_number = inn.match_type_number 
JOIN CRICKET.OUT_DATA.OUT_DIMTEAM win ON stg.winner = win.team_name
JOIN CRICKET.OUT_DATA.OUT_DIMTEAM toss ON stg.toss_winner = toss.team_name

GROUP BY stg.match_number, stg.event_date, stg.event_name, ven.venue_id, teamA.team_id, teamB.TEAM_ID, stg.match_type_number, stg.match_type, stg.season, stg.gender, stg.team_type, win.team_id, toss.team_id, stg.toss_decision

SELECT * FROM CRICKET.OUT_DATA.OUT_MATCH_DETAILS

--Innings FACT
CREATE OR REPLACE TABLE CRICKET.OUT_DATA.Out_Innings (
MATCH_TYPE_NUMBER INT PRIMARY KEY,
team_id INT,
batter_id INT,
bowler_id INT,
non_striker_id INT,
over INT,
runs INT,
extras int,
player_out_id INT,
player_out_kind text,

CONSTRAINT fk_team FOREIGN KEY (team_id) REFERENCES Out_DimTeam(team_id),
CONSTRAINT fk_batter_id FOREIGN KEY (batter_id) REFERENCES Out_DimPlayer(player_id),
CONSTRAINT fk_bowler_id FOREIGN KEY (bowler_id) REFERENCES Out_DimPlayer(player_id),
CONSTRAINT fk_non_striker_id FOREIGN KEY (non_striker_id) REFERENCES Out_DimPlayer(player_id),
CONSTRAINT fk_player_out_id FOREIGN KEY (player_out_id) REFERENCES Out_DimPlayer(player_id)
)

INSERT INTO CRICKET.OUT_DATA.OUT_INNINGS
SELECT inn.match_type_number, team.team_id, p1.player_id, p2.player_id, p3.player_id, inn.over, inn.runs, inn.extras, p4.player_id, inn.kind 
FROM CRICKET.STAGING_DATA.STG_INNINGS inn
LEFT JOIN CRICKET.Out_Data.Out_DimTeam team ON inn.TEAM = team.team_name
LEFT JOIN CRICKET.OUT_DATA.OUT_DIMPLAYER p1 ON inn.Batter = p1.player_name
LEFT JOIN CRICKET.OUT_DATA.OUT_DIMPLAYER p2 ON inn.bowler = p2.player_name
LEFT JOIN CRICKET.OUT_DATA.OUT_DIMPLAYER p3 ON inn.non_striker = p3.player_name
LEFT JOIN CRICKET.OUT_DATA.OUT_DIMPLAYER p4 ON inn.player_out = p4.player_name

SELECT * FROM CRICKET.OUT_DATA.OUT_INNINGS
